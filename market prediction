import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense

# Load the stock market data into a Pandas DataFrame
data = pd.read_csv('stock_data.csv')

# Preprocess the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data['Close'].values.reshape(-1, 1))

# Split the data into training and testing sets
train_size = int(len(scaled_data) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size:]

# Prepare the training and testing datasets
def create_dataset(dataset, lookback):
    X, Y = [], []
    for i in range(len(dataset) - lookback):
        X.append(dataset[i:i+lookback, 0])
        Y.append(dataset[i+lookback, 0])
    return np.array(X), np.array(Y)

lookback = 20  # Number of previous time steps to consider
X_train, y_train = create_dataset(train_data, lookback)
X_test, y_test = create_dataset(test_data, lookback)

# Reshape the input data for LSTM (samples, time steps, features)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# Create and train the LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(lookback, 1)))
model.add(LSTM(units=50))
model.add(Dense(units=1))
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=10, batch_size=32)

# Make predictions on the test set
predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Evaluate the model
mse = np.mean((predictions - scaler.inverse_transform(y_test.reshape(-1, 1)))**2)
print('Mean Squared Error:', mse)

# Predict future stock prices
last_n_days = scaled_data[-lookback:]
last_n_days = np.reshape(last_n_days, (1, lookback, 1))
predicted_price = model.predict(last_n_days)
predicted_price = scaler.inverse_transform(predicted_price)
print('Predicted Price:', predicted_price)
